<?php/** *  *  * @author: Sekiphp * @created: 4.4.2015 * @last_update: 22.5.2015   */ class Inventory{  private $playerID;    public function __construct($playerID){    $this -> playerID = $playerID;  }	/**	 * Transfer item to offers	 * 	 * @param int $rowID PK row from DB (table ma_items)	 * @param int qty Quantity	 * @param double $price Price per each	 */  public function sellItem($rowID, $qty, $price){		$data = $this -> getInventoryRow($rowID);    $res = $this -> checkQtyAndOwner($data['id'], $qty);		if(!$res) return "bad_qty";				$res = $this -> checkPrice($data, $price);		if(!$res) return "bad_price";        				$this -> createOffer($data, $qty, $price);		$this -> updateInventory($data['id'], $qty);				return "sell_ok";  }		/**	 * Get row data from ma_items about specified row	 * 	 * @param int $rowID PK	 * @return array Data set	 */	private function getInventoryRow($rowID){		$sql = "			SELECT * 			FROM " . TABLE_ITEMS . " 			WHERE id = ?		";		$params = array($rowID);				return DB::assoc(DB::query($sql, $params));	}    /**   * Check if player have too much items then he sould like to sell	 * Check qty and owner	 * 	 * @param int $rowID	 * @param int $qty Quantity   */     private function checkQtyAndOwner($rowID, $qty){			if($qty <= 0) return FALSE;		    $sql = "      SELECT qty       FROM " . TABLE_ITEMS . "       WHERE         playerID = :playerID AND         id = :rowID       ";    $where = array(      ":playerID" => $this->playerID,			":rowID" => $rowID,     );         $item = DB::assoc(DB::query($sql, $where));		return ($item['qty'] >= $qty);  }		// TODO: check maximal price	private function checkPrice($data, $price){		if($price <= 0) return FALSE;		return TRUE;	}  /**	 * @param int $rowID	 	 * @param int $qty	 */  private function updateInventory($rowID, $qty){		// update inventory		$sql = "			UPDATE " .  TABLE_ITEMS. " 			SET 				qty = (qty - $qty) 			WHERE 				playerID = :playerID AND 				id = :rowID		";		$where = array(			":playerID" => $this->playerID,			":rowID" => $rowID,		);		DB::query($sql, $where);				// delete rows where is zero pieces		$sql = "DELETE FROM " . TABLE_ITEMS . " WHERE qty = 0";  		DB::query($sql);  }		/**	 * 	 * 	 */	private function createOffer($data, $qty, $price){  		// first we look for same offers -> (insert || update)		$params = array(			":playerID" => $this->playerID, 			":itemID" => $data['itemID'], 			":itemDamage" => $data['itemDamage'], 			":itemMeta" => $data['itemMeta'], 			":price" => $price, 		);    $sqlInfo = "      SELECT qty       FROM " . TABLE_OFFERS . "       WHERE        playerID = :playerID AND         itemID = :itemID AND 				itemDamage = :itemDamage AND 				itemMeta = :itemMeta AND         price = :price    ";      $info = DB::assoc(DB::query($sqlInfo, $params));    if(!$info){			// new offer      $sql = "				INSERT INTO " . TABLE_OFFERS . "					SELECT 						'' AS id, playerID, itemID, itemDamage, :qty AS qty, itemMeta, enchantments, lore, :price AS price 					FROM " . TABLE_ITEMS . " 					WHERE 						playerID = :playerID AND 						itemID = :itemID AND 						itemDamage = :itemDamage AND 						itemMeta = :itemMeta      ";			$params[":qty"] = $qty;      DB::query($sql, $params); // params are similar to query $info			Logger::info("ItemSell", "User: " .  $_SESSION['playerName'] . " uspěšně vložil item s ID " . $id . ":" . $sub . " do offers");		    }    else{			// update existing offer			$sql = "				UPDATE " .  TABLE_OFFERS . " 				SET 					qty = :qty 				WHERE 					itemID = :itemID AND 					itemDamage = :itemDamage AND 					playerID = :playerID AND 					itemMeta = :itemMeta AND 					price = :price			";      $update = array(				":itemID" => $data['itemID'], 				":itemDamage" => $data['itemDamage'], 				":itemMeta" => $data['itemMeta'], 				":playerID" => $this->playerID, 				":qty" => $info['qty'] + $qty, 				":price" => $price,					);      DB::query($sql, $update);						Logger::info("ItemSell", "User: " .  $_SESSION['playerName'] . " uspěšně přidal (sjednotil) item s ID " . $id . ":" . $sub . " do offers");					    }	}			public static function getInventory($playerID, $locale){		// 0 = il.itemSubID -> damage is damage, not subID		$sql = "			SELECT DISTINCT 				il.name, il.img, ip.id, ip.qty, ip.itemId, ip.itemDamage, ip.itemMeta, ip.enchantments,    				CASE  					WHEN ip.lore != '' OR ip.enchantments != '{}' THEN ''           					ELSE 'disabled'         				END AS getauction           			FROM " . TABLE_ITEMS . " AS ip 			LEFT JOIN " . TABLE_ITEMS_LIST . " AS il			ON 				(ip.itemID = il.itemID AND ip.itemDamage = il.itemSubID)			WHERE ip.playerID = :playerID  			ORDER BY qty DESC		";		//				ip.itemID = il.itemID AND 				//(0 = il.itemSubID OR ip.itemDamage = il.itemSubID) 		$ret = array();		$res = DB::query($sql, array(":playerID" => $playerID));		while($row = DB::assoc($res)){			$meta = new ItemMeta($row['itemMeta'], $row['enchantments'], $row['itemId']);			$row['damage'] = $meta -> parseDamage($locale);			$row['enchants'] = $meta -> parseEnchants();						$ret[] = $row;		}		return $ret;		//return DB::assocAll($res);	}}